@article{Burkner_2017,
   author = {Bürkner, Paul-Christian},
   title = {brms: An R Package for Bayesian Multilevel Models Using Stan},
   journal = {2017},
   volume = {80},
   number = {1},
   pages = {28},
   abstract = {The brms package implements Bayesian multilevel models in R using the probabilistic programming language Stan. A wide range of distributions and link functions are supported, allowing users to fit - among others - linear, robust linear, binomial, Poisson, survival, ordinal, zero-inflated, hurdle, and even non-linear models all in a multilevel context. Further modeling options include autocorrelation of the response variable, user defined covariance structures, censored data, as well as meta-analytic standard errors. Prior specifications are flexible and explicitly encourage users to apply prior distributions that actually reflect their beliefs. In addition, model fit can easily be assessed and compared with the Watanabe-Akaike information criterion and leave-one-out cross-validation.},
   keywords = {Bayesian inference
multilevel model
ordinal data
MCMC
Stan
R},
   ISSN = {1548-7660},
   DOI = {10.18637/jss.v080.i01},
   url = {https://www.jstatsoft.org/v080/i01},
   year = {2017},
   type = {Journal Article}
}

@article{Carpenter_etal_2017,
   author = {Carpenter, B. and Gelman, A. and Hoffman, M. D. and Lee, D. and Goodrich, B. and Betancourt, M. and Riddell, A. and Guo, J. Q. and Li, P. and Riddell, A.},
   title = {Stan: A Probabilistic Programming Language},
   journal = {Journal of Statistical Software},
   volume = {76},
   number = {1},
   pages = {1-29},
   note = {Ei7tg
Times Cited:626
Cited References Count:31},
   abstract = {Stan is a probabilistic programming language for specifying statistical models. A Stan program imperatively defines a log probability function over parameters conditioned on specified data and constants. As of version 2.14.0, Stan provides full Bayesian inference for continuous-variable models through Markov chain Monte Carlo methods such as the No-U-Turn sampler, an adaptive form of Hamiltonian Monte Carlo sampling. Penalized maximum likelihood estimates are calculated using optimization methods such as the limited memory Broyden-Fletcher-Goldfarb-Shanno algorithm.
Stan is also a platform for computing log densities and their gradients and Hessians, which can be used in alternative algorithms such as variational Bayes, expectation propagation, and marginal inference using approximate integration. To this end, Stan is set up so that the densities, gradients, and Hessians, along with intermediate quantities of the algorithm such as acceptance probabilities, are easily accessible.
Stan can be called from the command line using the cmdstan package, through R using the rstan package, and through Python using the pystan package. All three interfaces support sampling and optimization-based inference with diagnostics and posterior analysis. rstan and pystan also provide access to log probabilities, gradients, Hessians, parameter transforms, and specialized plotting.},
   keywords = {probabilistic program
bayesian inference
algorithmic differentiation
stan
monte-carlo},
   ISSN = {1548-7660},
   DOI = {10.18637/jss.v076.i01},
   url = {<Go to ISI>://WOS:000392705600001},
   year = {2017},
   type = {Journal Article}
}

@article{Carpenter_etal_2015,
   author = {Carpenter, Bob and Hoffman, Matthew D. and Brubaker, Marcus and Lee, Daniel and Li, Peter and Betancourt, Michael},
   title = {The Stan Math Library: Reverse-Mode Automatic Differentiation in C++},
   journal = {arXiv},
   volume = {abs/1509.07164},
   url = {http://arxiv.org/abs/1509.07164},
   year = {2015},
   type = {Journal Article}
}

@article{Stan_Development_Team_2018_c,
   author = {Stan Development Team, },
   title = {RStan: the R interface to Stan},
   url = {http://mc-stan.org},
   year = {2018},
   type = {Journal Article}
}

@article{Stan_Development_Team_2018_b,
   author = {Stan Development Team, },
   title = {The Stan Core Library, Version 2.18.0},
   url = {http://mc-stan.org},
   year = {2018},
   type = {Journal Article}
}

@article{Stan_Development_Team_2018_a,
   author = {Stan Development Team, },
   title = {Stan Modeling Language Users Guide and Reference Manual, Version 2.18.0},
   url = {http://mc-stan.org},
   year = {2018},
   type = {Journal Article}
}

@article{Vehtari_etal_2019,
   author = {Vehtari, Aki and Gabry, Jonah and Yao, Y. and Gelman, Andrew},
   title = {loo: Efficient leave-one-out-cross-validation and WAIC for Bayesian models},
   url = {https://cran.r-project.org/package=loo},
   year = {2019},
   type = {Journal Article}
}

@article{Vehtari_etal_2017,
   author = {Vehtari, Aki and Gelman, Andrew and Gabry, Jonah},
   title = {Practical Bayesian model evaluation using leave-one-out cross-validation and WAIC},
   journal = {Statistics and Computing},
   volume = {27},
   number = {5},
   pages = {1413-1432},
   abstract = {Leave-one-out cross-validation (LOO) and the widely applicable information criterion (WAIC) are methods for estimating pointwise out-of-sample prediction accuracy from a fitted Bayesian model using the log-likelihood evaluated at the posterior simulations of the parameter values. LOO and WAIC have various advantages over simpler estimates of predictive error such as AIC and DIC but are less used in practice because they involve additional computational steps. Here we lay out fast and stable computations for LOO and WAIC that can be performed using existing simulation draws. We introduce an efficient computation of LOO using Pareto-smoothed importance sampling (PSIS), a new procedure for regularizing importance weights. Although WAIC is asymptotically equal to LOO, we demonstrate that PSIS-LOO is more robust in the finite case with weak priors or influential observations. As a byproduct of our calculations, we also obtain approximate standard errors for estimated predictive errors and for comparison of predictive errors between two models. We implement the computations in an R package called loo and demonstrate using models fit with the Bayesian inference package Stan.},
   ISSN = {1573-1375},
   DOI = {10.1007/s11222-016-9696-4},
   url = {https://doi.org/10.1007/s11222-016-9696-4
https://link.springer.com/content/pdf/10.1007%2Fs11222-016-9696-4.pdf},
   year = {2017},
   type = {Journal Article}
}
